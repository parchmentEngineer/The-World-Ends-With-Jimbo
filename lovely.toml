[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Cards held in hand can provide chips
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if effects[ii].h_mult then'''
position = "before"
payload = '''
if effects[ii].h_chips then
	mod_percent = true
	hand_chips = mod_chips(hand_chips + effects[ii].h_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'chips', effects[ii].h_chips, percent)
end'''
match_indent = true

# Earthshake - Unused discards carry over
# G.FUNCS.cash_out
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.cash_out = function(e)"
position = "after"
payload = '''
	for _, c in ipairs(SMODS.find_card('j_twewy_earthshake')) do
		if G.GAME.round_resets.blind_states.Boss == 'Defeated' then
			c.ability.extra.discards = 0
		else
			c:juice_up()
			c.ability.extra.discards = G.GAME.current_round.discards_left
			G.GAME.round_bonus.discards = G.GAME.round_bonus.discards + G.GAME.current_round.discards_left
		end
	end'''
match_indent = true

# Top Gear - Common jokers in shop are polychrome
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local card = create_card(v.type, area, nil, nil, nil, nil, nil, 'sho')'''
position = "after"
payload = '''
if G.GAME.twewy_top_gear then
	if card.ability.set == 'Joker' and card.config.center.rarity == 1 then
		card:set_edition({polychrome = true})
	end
end'''
match_indent = true

# Playmate Beam - Cards in standard packs match your last played high card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and "Enhanced" or "Base", G.pack_cards, nil, nil, nil, true, nil, 'sta')'''
position = "at"
payload = '''
if G.GAME.twewy_playmate_beam and G.GAME.twewy_playmate_beam ~= 0 then
	playmate_suit = pseudorandom_element({'S','H','D','C'}, pseudoseed('playmate'))
	card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and "Enhanced" or "Base", G.pack_cards, nil, nil, nil, true, nil, 'sta')
	local newCode = playmate_suit.."_"
    local newVal = (G.GAME.twewy_playmate_beam == 'Ace' and 'A') or
    (G.GAME.twewy_playmate_beam == 'King' and 'K') or
    (G.GAME.twewy_playmate_beam == 'Queen' and 'Q') or
    (G.GAME.twewy_playmate_beam == 'Jack' and 'J') or
    (G.GAME.twewy_playmate_beam == '10' and 'T') or 
    (G.GAME.twewy_playmate_beam)
    local new_card = G.P_CARDS[newCode..newVal]
	card:set_base(new_card)
else
	card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and "Enhanced" or "Base", G.pack_cards, nil, nil, nil, true, nil, 'sta')
end'''
match_indent = true

# Natural Puppy Deck - Cards in standard packs are face cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and "Enhanced" or "Base", G.pack_cards, nil, nil, nil, true, nil, 'sta')'''
position = "at"
payload = '''
if G.GAME.twewy_naturalPuppyDeck then
	playmate_suit = pseudorandom_element({'S','H','D','C'}, pseudoseed('naturalPuppy'))
	card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and "Enhanced" or "Base", G.pack_cards, nil, nil, nil, true, nil, 'sta')
	local newCode = playmate_suit.."_"
    local newVal = pseudorandom_element({'J','K','Q'}, pseudoseed('naturalPuppy'))
    local new_card = G.P_CARDS[newCode..newVal]
	card:set_base(new_card)
else
	card = create_card((pseudorandom(pseudoseed('stdset'..G.GAME.round_resets.ante)) > 0.6) and "Enhanced" or "Base", G.pack_cards, nil, nil, nil, true, nil, 'sta')
end'''
match_indent = true

# Natural Puppy Deck - Standard packs have X extra rewards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.GAME.pack_choices = self.config.center.config.choose or 1'''
position = "after"
payload = '''
if G.GAME.twewy_naturalPuppyDeck and self.ability.name:find('Standard') then
	G.GAME.pack_choices = G.GAME.pack_choices + 1
end'''
match_indent = true

# Natural Puppy Deck - Update booster pack description
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if not full_UI_table.name then full_UI_table.name = localize{type = 'name', set = 'Other', key = name_override, nodes = full_UI_table.name} end'''
position = "before"
payload = '''
if G.GAME.twewy_naturalPuppyDeck and _c.kind == "Standard" then
    loc_vars[1] = loc_vars[1] + 1
end'''
match_indent = true

# Rakuyo - Booster packs have X extra options
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.GAME.pack_choices = self.config.center.config.choose or 1'''
position = "after"
payload = '''
if G.GAME.rakuyo_booster_bonus then
	G.GAME.pack_size = G.GAME.pack_size + G.GAME.rakuyo_booster_bonus
end'''
match_indent = true

# Rakuyo - Booster packs have X extra options
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''local _size = self.ability.extra'''
position = "after"
payload = '''
if G.GAME.rakuyo_booster_bonus then
	_size = _size + G.GAME.rakuyo_booster_bonus
end'''
match_indent = true

# Rakuyo - Update booster pack description
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if not full_UI_table.name then full_UI_table.name = localize{type = 'name', set = 'Other', key = name_override, nodes = full_UI_table.name} end'''
position = "before"
payload = '''
if G.GAME.rakuyo_booster_bonus then
    loc_vars[2] = loc_vars[2] + G.GAME.rakuyo_booster_bonus
end'''
match_indent = true

# Gatito - Get custom rarity in Gatito packs
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''rarity = (_legendary and 4) or (rarity > 0.95 and 3) or (rarity > 0.7 and 2) or 1'''
position = "at"
payload = '''
if type(_rarity) == 'string' then
	rarity = _rarity
else
	rarity = (_legendary and 4) or (rarity > 0.95 and 3) or (rarity > 0.7 and 2) or 1
end'''
match_indent = true

# Sheep Heavenly - Move red seal from played cards onto leftmost held card
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if hand_chips*mult > 0 then'''
position = "before"
payload = '''
if G.GAME.twewy_sheepHeavenlyDeck then
	G.E_MANAGER:add_event(Event({
		func = function() 
			local maxRedSeals = math.min(#scoring_hand, #G.hand.cards)
			local sealsToAdd = 0
			for k, v in ipairs(scoring_hand) do
				if (v.seal and v.seal == 'Red') then
					sealsToAdd = sealsToAdd + 1
					if sealsToAdd > maxRedSeals then
						sealsToAdd = maxRedSeals
					else
						v:set_seal()
						v:juice_up()
					end
				end
			end
			for k, v in ipairs(G.hand.cards) do
				if not v.seal and sealsToAdd > 0 then
					sealsToAdd = sealsToAdd - 1
					v:set_seal('Red')
					v:juice_up()
				end
			end
			return true
		end
	}))
end'''
match_indent = true

# Sheep Heavenly - Same as previous patch but works if Tailsman overwrites first
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if to_big(hand_chips)*mult > to_big(0) then'''
position = "before"
payload = '''
if G.GAME.twewy_sheepHeavenlyDeck then
	G.E_MANAGER:add_event(Event({
		func = function() 
			local maxRedSeals = math.min(#scoring_hand, #G.hand.cards)
			local sealsToAdd = 0
			for k, v in ipairs(scoring_hand) do
				if (v.seal and v.seal == 'Red') then
					sealsToAdd = sealsToAdd + 1
					if sealsToAdd > maxRedSeals then
						sealsToAdd = maxRedSeals
					else
						v:set_seal()
						v:juice_up()
					end
				end
			end
			for k, v in ipairs(G.hand.cards) do
				if not v.seal and sealsToAdd > 0 then
					sealsToAdd = sealsToAdd - 1
					v:set_seal('Red')
					v:juice_up()
				end
			end
			return true
		end
	}))
end'''
match_indent = true

